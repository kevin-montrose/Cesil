<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cesil</name>
    </assembly>
    <members>
        <member name="M:Cesil.BoundConfigurationBase`1.#ctor">
            <summary>
            For some testing scenarios.
            
            Created instance is nearly unusable.
            </summary>
        </member>
        <member name="M:Cesil.BoundConfigurationBase`1.#ctor(Cesil.Options)">
            <summary>
            For working with dynamic.
            </summary>
        </member>
        <member name="M:Cesil.BoundConfigurationBase`1.#ctor(System.Collections.Generic.IEnumerable{Cesil.DeserializableMember},Cesil.Column[],System.Boolean[],Cesil.Options)">
            <summary>
            For working with concrete types.
            </summary>
        </member>
        <member name="T:Cesil.Configuration">
            <summary>
            Used to combine a type and an Options into an IBoundConfiguration(T),
            which can create readers and writers.
            </summary>
        </member>
        <member name="M:Cesil.Configuration.ForDynamic">
            <summary>
            Create a new IBoundConfiguration(T) with Options.DynamicDefault, for use 
              with dynamic types.
            </summary>
        </member>
        <member name="M:Cesil.Configuration.ForDynamic(Cesil.Options)">
            <summary>
            Create a new IBoundConfiguration(T) with given Options, for use 
              with dynamic types.
            </summary>
        </member>
        <member name="M:Cesil.Configuration.For``1">
            <summary>
            Create a new IBoundConfiguration(TRow) with Options.Default, for
              use with the given type.
            </summary>
        </member>
        <member name="M:Cesil.Configuration.For``1(Cesil.Options)">
            <summary>
            Create a new IBoundConfiguration(T) with the given Options, for
              use with the given type.
            </summary>
        </member>
        <member name="T:Cesil.DynamicRowDisposal">
            <summary>
            When a dynamic row returned by a IReader or IAsyncReader 
               will be disposed.
            </summary>
        </member>
        <member name="F:Cesil.DynamicRowDisposal.OnReaderDispose">
            <summary>
            Dynamic rows will be automatically disposed when the
              reader that returned them is disposed.
            </summary>
        </member>
        <member name="F:Cesil.DynamicRowDisposal.OnExplicitDispose">
            <summary>
            Dynamic rows will only be disposed when Dispose() is
              explicitly called on the row.
            </summary>
        </member>
        <member name="T:Cesil.ExtraColumnTreatment">
            <summary>
            How to handle extra columns when reading a row.
            
            A column is "extra" is if it's index is beyond 
            those found in the header (or first row, if no header is
            present) of the CSV being read.
            </summary>
        </member>
        <member name="F:Cesil.ExtraColumnTreatment.Ignore">
            <summary>
            Ignore any columns beyond those present in a
            header (or first row, if no header is present).
            </summary>
        </member>
        <member name="F:Cesil.ExtraColumnTreatment.IncludeDynamic">
            <summary>
            Include columns beyond those in the header (or first row,
            if no header is present) when reading dynamic rows.  Extra
            columns will be accessible via index, as no column name will
            be available.
            
            This is equivalent to Ignore when reading statically typed rows.
            </summary>
        </member>
        <member name="F:Cesil.ExtraColumnTreatment.ThrowException">
            <summary>
            Throw an exception when a column beyond those in the header (
            or first row, if no header is present) is encountered.
            </summary>
        </member>
        <member name="T:Cesil.IBoundConfiguration`1">
            <summary>
            Represents and Options and Type pair.
            
            Used to create readers and writers.
            </summary>
        </member>
        <member name="P:Cesil.IBoundConfiguration`1.Options">
            <summary>
            The Options used to create this configuration.
            
            If any settings are used that defer decisions (like ReadHeader.Detect)
              this Options object will remain unchanged when a decision is made.  In other words,
              this Options object will always match what was used to create the configuration - it
              is not updated.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateReader(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Encoding,System.Object)">
            <summary>
            Create a synchronous reader for the given sequence, converting bytes to characters using the provided encoding.
            
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateReader(System.Buffers.ReadOnlySequence{System.Char},System.Object)">
            <summary>
            Create a synchronous reader for the given sequence.
            
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateReader(System.IO.TextReader,System.Object)">
            <summary>
            Create a synchronous reader for the given reader.
            
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateAsyncReader(System.IO.Pipelines.PipeReader,System.Text.Encoding,System.Object)">
            <summary>
            Create an asynchronous reader for the given reader.
            
            The provided encoding is used to convert the bytes provided by the reader
              into characters for parsing.
            
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateAsyncReader(System.IO.TextReader,System.Object)">
            <summary>
            Create an asynchronous reader for the given reader.
            
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateWriter(System.Buffers.IBufferWriter{System.Byte},System.Text.Encoding,System.Object)">
            <summary>
            Create a synchronous writer for the given writer, converting chars to bytes using the given encoding.
            
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateWriter(System.Buffers.IBufferWriter{System.Char},System.Object)">
            <summary>
            Create a synchronous writer for the given writer.
            
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateWriter(System.IO.TextWriter,System.Object)">
            <summary>
            Create a synchronous writer for the given writer.
            
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateAsyncWriter(System.IO.Pipelines.PipeWriter,System.Text.Encoding,System.Object)">
            <summary>
            Create an asynchronous writer for the given writer.
            
            The provided encoding is used to convert characters into 
              bytes.
            
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.IBoundConfiguration`1.CreateAsyncWriter(System.IO.TextWriter,System.Object)">
            <summary>
            Create an asynchronous writer for the given writer.
            
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="T:Cesil.Options">
            <summary>
            A set of options for reading and writing CSV files.
            
            Combine with Configuration to bind to a particular
            type in a IBoundConfiguration(T) which can create
            readers and writers.
            </summary>
        </member>
        <member name="F:Cesil.Options.Default">
            <summary>
            Default options:
              - separator = ,
              - row endings = \r\n
              - escaped columns start = "
              - escape character = "
              - detects headers when reading
              - writes headers
              - uses the default type describer
              - uses MemoryPool.Shared
              - uses the default write buffer size
              - does not write a new line after the last row
              - does not support comments
              - uses the default read buffer size
              - dynamic rows are disposed when the reader that returns them is disposed
              - whitespace is preserved
              - extra columns are ignored
            </summary>
        </member>
        <member name="F:Cesil.Options.DynamicDefault">
            <summary>
            Default options for dynamic operations:
              - separator = ,
              - row endings = \r\n
              - escaped columns start = "
              - escape character = "
              - assumes headers are present
              - writes headers
              - uses the default type describer
              - uses MemoryPool.Shared
              - uses the default write buffer size
              - does not write a new line after the last row
              - does not support comments
              - uses the default read buffer size
              - dynamic rows are disposed when the reader that returns them is disposed
              - extra columns are included, accessible via index
            </summary>
        </member>
        <member name="P:Cesil.Options.ValueSeparator">
            <summary>
            Character used to separate two values in a row
            
            Typically a comma.
            </summary>
        </member>
        <member name="P:Cesil.Options.EscapedValueStartAndEnd">
            <summary>
            Character used to start an escaped value.
            
            Typically a double quote, but can be null for some formats.
            </summary>
        </member>
        <member name="P:Cesil.Options.EscapedValueEscapeCharacter">
            <summary>
            Character used to escape another character in an
              escaped value.
              
            Typically a double quote, but can be null for some formats and
              will be null for formats without an EscapedValueStartAndEnd.
            </summary>
        </member>
        <member name="P:Cesil.Options.RowEnding">
            <summary>
            The sequence of characters used to end a row.
            </summary>
        </member>
        <member name="P:Cesil.Options.ReadHeader">
            <summary>
            Whether or not to read headers when reading a CSV.
            </summary>
        </member>
        <member name="P:Cesil.Options.WriteHeader">
            <summary>
            Whether or not to write headers when writing a CSV.
            </summary>
        </member>
        <member name="P:Cesil.Options.TypeDescriber">
            <summary>
            The instance of ITypeDescriber that will be used to
              discover which columns to read or write, as well
              as the manner of their reading and writing.
            </summary>
        </member>
        <member name="P:Cesil.Options.WriteTrailingRowEnding">
            <summary>
            Whether or not to write a row ending after the last row
            in a CSV.
            </summary>
        </member>
        <member name="P:Cesil.Options.MemoryPool">
            <summary>
            Which MemoryPool to use when reading or writing a CSV.
            </summary>
        </member>
        <member name="P:Cesil.Options.CommentCharacter">
            <summary>
            Which character, if any, is used to indicate the start
            of a comment.
            
            Typically not set, but when set often '#'.
            </summary>
        </member>
        <member name="P:Cesil.Options.WriteBufferSizeHint">
            <summary>
            How big a buffer to request from the MemoryPool for
              buffering write operations.
              
            Set to 0 to disable buffering.
            
            Set to null to use a default size.
            </summary>
        </member>
        <member name="P:Cesil.Options.ReadBufferSizeHint">
            <summary>
            How big a buffer to request from the MemoryPool for
              servicing read operations.
              
            Set to 0 to use a default size.
            </summary>
        </member>
        <member name="P:Cesil.Options.DynamicRowDisposal">
            <summary>
            When to dispose any dynamic rows returned by an IReader or IAsyncReader.
            </summary>
        </member>
        <member name="P:Cesil.Options.WhitespaceTreatment">
            <summary>
            How to handle whitespace when encountered during parsing.
            </summary>
        </member>
        <member name="P:Cesil.Options.ExtraColumnTreatment">
            <summary>
            How to handle extra colums encountered when reading a CSV.
            </summary>
        </member>
        <member name="M:Cesil.Options.CreateBuilder">
            <summary>
            Create a new, empty, OptionsBuilder.
            </summary>
        </member>
        <member name="M:Cesil.Options.CreateBuilder(Cesil.Options)">
            <summary>
            Create a new OptionsBuilder that copies its initial values
            from the given Options.
            </summary>
        </member>
        <member name="M:Cesil.Options.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given Options.
            </summary>
        </member>
        <member name="M:Cesil.Options.Equals(Cesil.Options)">
            <summary>
            Returns true if this Options equals the given Options.
            </summary>
        </member>
        <member name="M:Cesil.Options.GetHashCode">
            <summary>
            Returns a stable hash for this Options.
            </summary>
        </member>
        <member name="M:Cesil.Options.ToString">
            <summary>
            Returns a representation of this Options object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.Options.op_Equality(Cesil.Options,Cesil.Options)">
            <summary>
            Compare two Options for equality
            </summary>
        </member>
        <member name="M:Cesil.Options.op_Inequality(Cesil.Options,Cesil.Options)">
            <summary>
            Compare two Options for inequality
            </summary>
        </member>
        <member name="T:Cesil.OptionsBuilder">
            <summary>
            Builder for Options.
            
            Options itself is immutable, but OptionsBuilder
            is chainable and mutable.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.ValueSeparator">
            <summary>
            Character used to separate two values in a row
            
            Typically a comma.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.EscapedValueStartAndEnd">
            <summary>
            Character used to start an escaped value.
            
            Typically a double quote, but can be null for some formats.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.EscapedValueEscapeCharacter">
            <summary>
            Character used to escape another character in an
              escaped value.
              
            Typically a double quote, but can be null for some formats and
              MUST be null for formats without an EscapedValueStartAndEnd.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.RowEnding">
            <summary>
            The sequence of characters used to end a row.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.ReadHeader">
            <summary>
            Whether or not to read headers when reading a CSV.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.WriteHeader">
            <summary>
            Whether or not to write headers when writing a CSV.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.TypeDescriber">
            <summary>
            The instance of ITypeDescriber that will be used to
              discover which columns to read or write, as well
              as the manner of their reading and writing.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.WriteTrailingRowEnding">
            <summary>
            Whether or not to write a row ending after the last row
            in a CSV.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.MemoryPool">
            <summary>
            Which MemoryPool to use when reading or writing a CSV.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.CommentCharacter">
            <summary>
            Which character, if any, is used to indicate the start
            of a comment.
            
            Typically not set, but when set often '#'.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.WriteBufferSizeHint">
            <summary>
            How big a buffer to request from the MemoryPool for
              buffering write operations.
              
            Set to 0 to disable buffering.
            
            Set to null to use a default size.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.ReadBufferSizeHint">
            <summary>
            How big a buffer to request from the MemoryPool for
              servicing read operations.
              
            Set to 0 to use a default size.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.DynamicRowDisposal">
            <summary>
            When to dispose any dynamic rows returned by an IReader or IAsyncReader.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.WhitespaceTreatment">
            <summary>
            How to handle whitespace when encountered during parsing.
            </summary>
        </member>
        <member name="P:Cesil.OptionsBuilder.ExtraColumnTreatment">
            <summary>
            How to handle extra colums encountered when reading a CSV.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.CreateBuilder">
            <summary>
            Create a new, empty, OptionsBuilder.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.CreateBuilder(Cesil.Options)">
            <summary>
            Create a new OptionsBuilder, copying defaults
            from the given Options.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.ToOptions">
            <summary>
            Create the Options object that has been configured
            by this builder.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithValueSeparator(System.Char)">
            <summary>
            Set the character used to separate two values in a row.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithEscapedValueStartAndEnd(System.Nullable{System.Char})">
            <summary>
            Set the character used to start an escaped value.
            
            If this is null, EscapedValueEscapeCharacter must also be null.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithEscapedValueEscapeCharacter(System.Nullable{System.Char})">
            <summary>
            Set the character used to escape another character in
            an escaped value.
            
            If this is non-null, EscapedValueStartAndEnd must also be non-null.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithRowEnding(Cesil.RowEnding)">
            <summary>
            Set the sequence of characters that will end a row.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithReadHeader(Cesil.ReadHeader)">
            <summary>
            Set whether or not to read headers.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithWriteHeader(Cesil.WriteHeader)">
            <summary>
            Set whether or not to write headers.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithTypeDescriber(Cesil.ITypeDescriber)">
            <summary>
            Set the ITypeDescriber used to discover and configure the
            columns that are read and written.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithWriteTrailingRowEnding(Cesil.WriteTrailingRowEnding)">
            <summary>
            Set whether or not to end the last row with a new line.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithMemoryPool(System.Buffers.MemoryPool{System.Char})">
            <summary>
            Set the MemoryPool used during reading and writing.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithCommentCharacter(System.Nullable{System.Char})">
            <summary>
            Set or clear the character that starts a row
            that is a comment.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithWriteBufferSizeHint(System.Nullable{System.Int32})">
            <summary>
            Set or clear the buffer size hint for write operations.
            
            Setting it to null will cause a default "best guess" buffer to
              be requested from the configured MemoryPool.
              
            Setting it to 0 will disable buffering.
            
            All values are treated as hints, it's up to
              the configured MemoryPool to satisfy the request.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithReadBufferSizeHint(System.Int32)">
            <summary>
            Set the buffer size hint for read operations.
            
            Setting to 0 will cause a default "best guess" size to be requested
              from the configured MemoryPool.
              
            All values are treated as hints, it's up to
              the configured MemoryPool to satisfy the request.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithDynamicRowDisposal(Cesil.DynamicRowDisposal)">
            <summary>
            Set when dynamic rows returned by a reader are disposed.
            
            The options are either when the reader is disposed (the default) or
              when the row is explicitly disposed.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithWhitespaceTreatment(Cesil.WhitespaceTreatments)">
            <summary>
            Set how to treat whitespace when parsing.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.WithExtraColumnTreatment(Cesil.ExtraColumnTreatment)">
            <summary>
            Set how to treat extra columns when parsing.
            </summary>
        </member>
        <member name="M:Cesil.OptionsBuilder.ToString">
            <summary>
            Returns a representation of this OptionsBuilder object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.ReadHeader">
            <summary>
            Whether to expect a header row when
              deserializing.
              
            This can be determined automatically with
              Detect.
            </summary>
        </member>
        <member name="F:Cesil.ReadHeader.Never">
            <summary>
            Reading will fail if headers are present.
            </summary>
        </member>
        <member name="F:Cesil.ReadHeader.Always">
            <summary>
            Reading will fail if headers are _not_ present.
            </summary>
        </member>
        <member name="F:Cesil.ReadHeader.Detect">
            <summary>
            Will probe for headers, but will continue if they
              are not present.
            </summary>
        </member>
        <member name="T:Cesil.RowEnding">
            <summary>
            Which character sequence ends a row.
            
            This can be determined automatically with
              Detect.
            </summary>
        </member>
        <member name="F:Cesil.RowEnding.CarriageReturn">
            <summary>
            The \r character.
            </summary>
        </member>
        <member name="F:Cesil.RowEnding.LineFeed">
            <summary>
            The \n character.
            </summary>
        </member>
        <member name="F:Cesil.RowEnding.CarriageReturnLineFeed">
            <summary>
            \r\n character sequence.
            </summary>
        </member>
        <member name="F:Cesil.RowEnding.Detect">
            <summary>
            Will probe the CSV and discover which sequence of characters
               indicates the end of a record.
            </summary>
        </member>
        <member name="T:Cesil.WhitespaceTreatments">
            <summary>
            How to handle whitespace when encountered during parsing.
            
            Allows for automatic removal of leading or trailing whitespace in or outside of
              values or headers, depending on whether in an escaped sequence.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.Preserve">
            <summary>
            Leave whitespace untouched, if in a value or header
              it will be preserved, if before or after an escaped
              value or header it will result in an error.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimLeadingInValues">
            <summary>
            Removes whitespace that is at the start of a value or header.
            
            For unescaped values this behaves the same as TrimBeforeValues.
            
            For escaped values this removed leading whitespace.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimTrailingInValues">
            <summary>
            Removes whitespace that follows a value or header.
            
            For unescaped values this behaves the same as TrimAfterValues.
            
            Leading whitespace in escaped values and headers will be
              removed.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimInValues">
            <summary>
            Combines TrimLeadingInValues and TrimTrailingInValues.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimBeforeValues">
            <summary>
            Removes whitespace before a value or header.
            
            For unescaped values this behaves the same as TrimLeadingInValues.
            
            For escaped values, only whitespace before the start of escaped value will be
              removed.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimAfterValues">
            <summary>
            Removes whitespace after a value or header.
            
            For unescaped values this behaves the same as TrimTrailingInValues.
            
            For escaped values, only whitespace after the end of escaped value will be
              removed.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.TrimBetweenValues">
            <summary>
            Combines TrimBeforeValues and TrimAfterValues.
            </summary>
        </member>
        <member name="F:Cesil.WhitespaceTreatments.Trim">
            <summary>
            Combines TrimInValues and TrimBetweenValues.
            </summary>
        </member>
        <member name="T:Cesil.WriteHeader">
            <summary>
            Whether or not to write a header row when
              serializing.
            </summary>
        </member>
        <member name="F:Cesil.WriteHeader.Always">
            <summary>
            The first row written by the writer will be a header row.
            
            Actually writing the row will be deferred until the first
              row is of data is written, or the writer is disposed.
            </summary>
        </member>
        <member name="F:Cesil.WriteHeader.Never">
            <summary>
            No header row will be written the writer.
            </summary>
        </member>
        <member name="T:Cesil.WriteTrailingRowEnding">
            <summary>
            Whether or not their should be a trailing row ending
              after the last row when serializing.
            </summary>
        </member>
        <member name="F:Cesil.WriteTrailingRowEnding.Always">
            <summary>
            After the last row is written, always append an additional row ending.
            </summary>
        </member>
        <member name="F:Cesil.WriteTrailingRowEnding.Never">
            <summary>
            Do not write an additional row ending after the last row is written.
            </summary>
        </member>
        <member name="T:Cesil.ColumnIdentifier">
            <summary>
            Identifies a particular column, either by index or 
              index and name.
            </summary>
        </member>
        <member name="P:Cesil.ColumnIdentifier.Index">
            <summary>
            Index of the column, base-0.
            </summary>
        </member>
        <member name="P:Cesil.ColumnIdentifier.HasName">
            <summary>
            Whether this column has a known name.
            </summary>
        </member>
        <member name="P:Cesil.ColumnIdentifier.Name">
            <summary>
            The name of the column.
            
            If HasName is false, this will throw an exception.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.Create(System.Int32)">
            <summary>
            Create a ColumnIdentifier for the given index.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.Create(System.Int32,System.String)">
            <summary>
            Create a ColumnIdentifier for the given index and name.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.Equals(System.Object)">
            <summary>
            Returns true if the given object is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.Equals(Cesil.ColumnIdentifier)">
            <summary>
            Returns true if the given object is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.GetHashCode">
            <summary>
            Returns a stable hash for this ColumnIdentifier.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.ToString">
            <summary>
            Describes this ColumnIdentifier.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.op_Equality(Cesil.ColumnIdentifier,Cesil.ColumnIdentifier)">
            <summary>
            Compare two ColumnIdentifiers for equality
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.op_Inequality(Cesil.ColumnIdentifier,Cesil.ColumnIdentifier)">
            <summary>
            Compare two ColumnIdentifiers for inequality
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.op_Explicit(System.Int32)~Cesil.ColumnIdentifier">
            <summary>
            Convenience operator for converting an index to a ColumnIdentifier.
            
            Equivalent to calling Create.
            </summary>
        </member>
        <member name="M:Cesil.ColumnIdentifier.op_Explicit(Cesil.ColumnIdentifier)~System.Int32">
            <summary>
            Paired operator for the int-to-ColumnIdentifier cast.
            
            Equivalent to Index property.
            </summary>
        </member>
        <member name="T:Cesil.ReadContext">
            <summary>
            Context object provided during read operations.
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.Options">
            <summary>
            Options used to create reader.  Useful for accessing
              shared configurations, like MemoryPool(char).
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.Mode">
            <summary>
            What, precisely, a reader is doing.
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.RowNumber">
            <summary>
            The index of the row being read (0-based).
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.HasColumn">
            <summary>
            Whether or not Column is available.
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.Column">
            <summary>
            The column being read.
            
            Will throw if HasColumn == false, or Mode != ReadingColumn.
            </summary>
        </member>
        <member name="P:Cesil.ReadContext.Context">
            <summary>
            The object, if any, provided to the call to CreateReader or
              CreateAsyncReader that produced the reader which is
              performing the read operation which is described
              by this context.
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.Equals(Cesil.ReadContext)">
            <summary>
            Returns true if this object equals the given ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.GetHashCode">
            <summary>
            Returns a stable hash for this ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.ToString">
            <summary>
            Returns a string representation of this ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.op_Equality(Cesil.ReadContext,Cesil.ReadContext)">
            <summary>
            Compare two ReadContexts for equality
            </summary>
        </member>
        <member name="M:Cesil.ReadContext.op_Inequality(Cesil.ReadContext,Cesil.ReadContext)">
            <summary>
            Compare two ReadContexts for inequality
            </summary>
        </member>
        <member name="T:Cesil.ReadContextMode">
            <summary>
            Indicates what a reader is doing when
              a ReadContext is created.
            </summary>
        </member>
        <member name="F:Cesil.ReadContextMode.ReadingColumn">
            <summary>
            A single column is being read.
            </summary>
        </member>
        <member name="F:Cesil.ReadContextMode.ReadingRow">
            <summary>
            A row is being read, but a particular 
            column hasn't been encountered yet.
            </summary>
        </member>
        <member name="F:Cesil.ReadContextMode.ConvertingColumn">
            <summary>
            A single column is being converted,
            occurs only during dynamic deserialization.
            </summary>
        </member>
        <member name="F:Cesil.ReadContextMode.ConvertingRow">
            <summary>
            A whole row is being converted,
            occurs only during dynamic deserialization.
            </summary>
        </member>
        <member name="T:Cesil.WriteContext">
            <summary>
            Context object provided during write operations.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.Options">
            <summary>
            Options used to create writer.  Useful for accessing
              shared configurations, like MemoryPool(char).
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.Mode">
            <summary>
            What, precisely, a writer is doing.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.HasRowNumber">
            <summary>
            Whether or not RowNumber is available.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.RowNumber">
            <summary>
            The index of the row being written (0-based).
            
            If HasRowNumber == false, or Mode is DiscoveringColumns this will throw.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.HasColumn">
            <summary>
            Whether or not Column is available.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.Column">
            <summary>
            Column being written.
            
            If HasColumn == false, or Mode != WriteColumn this will throw.
            </summary>
        </member>
        <member name="P:Cesil.WriteContext.Context">
            <summary>
            The object, if any, provided to the call to CreateWriter or
              CreateAsyncWriter that produced the writer which is
              performing the writer operation which is described
              by this context.
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.Equals(Cesil.WriteContext)">
            <summary>
            Returns true if this object equals the given WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.GetHashCode">
            <summary>
            Returns a stable hash for this WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.ToString">
            <summary>
            Returns a string representation of this WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.op_Equality(Cesil.WriteContext,Cesil.WriteContext)">
            <summary>
            Compare two WriteContexts for equality
            </summary>
        </member>
        <member name="M:Cesil.WriteContext.op_Inequality(Cesil.WriteContext,Cesil.WriteContext)">
            <summary>
            Compare two WriteContexts for inequality
            </summary>
        </member>
        <member name="T:Cesil.WriteContextMode">
            <summary>
            Indicates what a writer is doing when
              a WriteContext is created.
            </summary>
        </member>
        <member name="F:Cesil.WriteContextMode.DiscoveringColumns">
            <summary>
            A writer is discovering columns for a table, used during
              dynamic serialization to determine headers.
              
            Neither columns nor rows are specified during this operation.
            </summary>
        </member>
        <member name="F:Cesil.WriteContextMode.DiscoveringCells">
            <summary>
            A writer is discovering cells in a row, used during
              dynamic serialization to determine per-row values.
              
            Only a row is specified during this operation.
            </summary>
        </member>
        <member name="F:Cesil.WriteContextMode.WritingColumn">
            <summary>
            A writer is writing a single column.
            
            Both a row and a column are specified during this operation.
            </summary>
        </member>
        <member name="T:Cesil.CesilUtils">
            <summary>
            A collection of convenience methods for reading and writing using streams or files.
            
            These methods are less flexible than directly using Configuration and are not as efficient
            as using IReader(T), IAsyncReader(T), IWriter(T) and IAsyncWriter(T), but they involve much
            less code.
            
            Prefer them when the trade off for simplicity at the expense speed and flexibility makes sense.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.Enumerate``1(System.IO.TextReader,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate rows of type TRow from the given TextReader.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamic(System.IO.TextReader,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate dynamic rows from the given TextReader.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateFromFile``1(System.String,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate rows of type TRow from the given file.  If the file as a byte-order-marker (BOM) the indicated encoding will be used,
              otherwise utf-8 will be assumed.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamicFromFile(System.String,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate dynamic rows from the given file.  If the file as a byte-order-marker (BOM) the indicated encoding will be used,
              otherwise utf-8 will be assumed.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateFromString``1(System.String,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate rows of type TRow from the given string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamicFromString(System.String,Cesil.Options,System.Object)">
            <summary>
            Lazily enumerate dynamic rows from the given string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateAsync``1(System.IO.TextReader,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate rows of type TRow from the given TextReader.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamicAsync(System.IO.TextReader,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate dynamic rows from the given TextReader.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateFromFileAsync``1(System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate rows of type TRow from the given file.  If the file as a byte-order-marker (BOM) the indicated encoding will be used,
              otherwise utf-8 will be assumed.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamicFromFileAsync(System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate dynamic rows from the given file.  If the file as a byte-order-marker (BOM) the indicated encoding will be used,
              otherwise utf-8 will be assumed.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateFromStringAsync``1(System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate rows of type TRow from the given string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.EnumerateDynamicFromStringAsync(System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lazily and asynchronously enumerate dynamic rows from the given string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on ReadContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.Write``1(System.Collections.Generic.IEnumerable{``0},System.IO.TextWriter,Cesil.Options,System.Object)">
            <summary>
            Write a collection of rows of TRow to the given TextWriter.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamic(System.Collections.Generic.IEnumerable{System.Object},System.IO.TextWriter,Cesil.Options,System.Object)">
            <summary>
            Write a collection of dynamic rows to the given TextWriter.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToFile``1(System.Collections.Generic.IEnumerable{``0},System.String,Cesil.Options,System.Object)">
            <summary>
            Write a collection of rows of TRow to the given path.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToFile(System.Collections.Generic.IEnumerable{System.Object},System.String,Cesil.Options,System.Object)">
            <summary>
            Write a collection of dynamic rows to the given path.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToString``1(System.Collections.Generic.IEnumerable{``0},Cesil.Options,System.Object)">
            <summary>
            Write a collection of rows of TRow to a string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToString(System.Collections.Generic.IEnumerable{System.Object},Cesil.Options,System.Object)">
            <summary>
            Write a collection of dynamic rows to a string.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteAsync``1(System.Collections.Generic.IEnumerable{``0},System.IO.TextWriter,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to the given TextWriter asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicAsync(System.Collections.Generic.IEnumerable{System.Object},System.IO.TextWriter,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamic rows to the given TextWriter asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.IO.TextWriter,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to the given TextWriter asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},System.IO.TextWriter,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamics rows to the given TextWriter asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToFileAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to the given path asynchronously.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToFileAsync(System.Collections.Generic.IEnumerable{System.Object},System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamic rows to the given path asynchronously.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToFileAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to the given path asynchronously.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToFileAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},System.String,Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamic rows to the given path asynchronously.
            
            The file be created if it does not existing, overwritten if it does, and the encoding used will be utf-8.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToStringAsync``1(System.Collections.Generic.IEnumerable{``0},Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to a string asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToStringAsync(System.Collections.Generic.IEnumerable{System.Object},Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamic rows to a string asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteToStringAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of rows of TRow to a string asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="M:Cesil.CesilUtils.WriteDynamicToStringAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},Cesil.Options,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write a collection of dynamic rows to a string asynchronously.
            
            An optional Options object may be used, if not provided Options.Default
              will be used.
              
            Takes an optional context object which is made available
              during certain operations as a member on WriteContext.
              
            A CancellationToken may also be provided, CancellationToken.None will be used otherwise.
            </summary>
        </member>
        <member name="T:Cesil.IAsyncReader`1">
            <summary>
            Interface for an asynchronous reader.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.EnumerateAllAsync">
            <summary>
            Returns an async enumerable that will read and yield
            one row at a time.
            
            The enumerable will attempt to complete synchronously,
            but will not block if results are not available.
            
            The returned IAsyncEnumerable(TRow) may only be enumerated once.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.ReadAllAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all rows, storing into the provided collection.
            
            into must be non-null, and will be returned wrapped in a ValueTask.
            
            The task will attempt to complete synchronously, 
            but will not block if results are not available.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.ReadAllAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all rows into a list, returning the entire set at once.
            
            The task will attempt to complete synchronously, 
            but will not block if results are not available.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.TryReadAsync(System.Threading.CancellationToken)">
            <summary>
            Try to read a single row asynchronously, returning a ReadResult that 
            indicates success or failure.
            
            The task will attempt to complete synchronously, 
            but will not block if results are not available.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.TryReadWithReuseAsync(`0@,System.Threading.CancellationToken)">
            <summary>
            Reads a single row into the existing instance of row,
            returning a ReadResult that indicates success or failure.
            
            If need be, row will be initialized before this method returns - 
            it will remain in use until the returned ValueTask completes.
            
            Note, it is possible for row to be initialized BUT for the ReadResult
            to indicate failure.  In that case row should be ignored / discarded.
            
            The task will attempt to complete synchronously, 
            but will not block if results are not available.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.TryReadWithCommentAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a single row or comment.
            
            Distinguish between a row, comment, or nothing by inspecting 
            ReadWithCommentResult(T).ResultType.
            
            Note, it is possible for row to be initialized BUT for this method
            to return a comment or no value.  In that case row should be ignored.
            
            The task will attempt to complete synchronously, 
            but will not block if results are not available.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncReader`1.TryReadWithCommentReuseAsync(`0@,System.Threading.CancellationToken)">
             <summary>
             Reads a single row (storing into an existing instance of a row
             if provided) or comment.
            
             Distinguish between a row, comment, or nothing by inspecting 
             ReadWithCommentResult(T).ResultType.
             
             Row will be initialized if need be.
             
             Note, it is possible for row to be initialized BUT for this method
             to return a comment or no value.  In that case row should be ignored.
             
             The task will attempt to complete synchronously, 
             but will not block if results are not available.
             </summary>
        </member>
        <member name="T:Cesil.IAsyncWriter`1">
            <summary>
            Interface for writing rows asynchronously.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncWriter`1.WriteAllAsync(System.Collections.Generic.IAsyncEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Writes all rows enumerated by the given IAsyncEnumerable.
            
            Will complete synchronously if possible, but will not block
            if all rows are not immediately available or if the underlying
            sink does not complete immediately.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncWriter`1.WriteAllAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Writes all rows enumerated by the given IEnumerable.
            
            Will complete synchronously if possible, but will not block
            if the underlying sink does not complete immediately.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Write a single row.
            
            Will complete synchronously if possible, but will not block
            if the underlying sink does not complete immediately.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncWriter`1.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Write a comment as a row.
            
            Only supported if this IWriter's configuration has a way to indicate comments.
            
            If the comment contains the row ending character sequence, it will be written as multiple
            comment lines.
            
            Will complete synchronously if possible, but will not block
            if the underlying sink does not complete immediately.
            </summary>
        </member>
        <member name="M:Cesil.IAsyncWriter`1.WriteCommentAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Write a comment as a row.
            
            Only supported if this IWriter's configuration has a way to indicate comments.
            
            If the comment contains the row ending character sequence, it will be written as multiple
            comment lines.
            
            Will complete synchronously if possible, but will not block
            if the underlying sink does not complete immediately.
            </summary>
        </member>
        <member name="T:Cesil.ImpossibleException">
            <summary>
            An exception that should never happen.
            
            If it does, that indicates a bug in Cesil.  Kindly report it on https://github.com/kevin-montrose/Cesil/issues/new.
            </summary>
        </member>
        <member name="M:Cesil.ImpossibleException.ToString">
            <summary>
            Returns a representation of this ImpossibleException object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.IReader`1">
            <summary>
            Interface for a synchronous reader.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.ReadAll``1(``0)">
            <summary>
            Reads all rows into the provided collection, returning the entire set at once.
            
            into must be non-null.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.ReadAll">
            <summary>
            Reads all rows, returning the entire set at once.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.EnumerateAll">
            <summary>
            Returns an enumerable that will read and yield
            one row at a time.
            
            The returned IEnumerable(TRow) may only be enumerated once.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.TryRead(`0@)">
            <summary>
            Reads a single row, populating row and returning true
            if a row was available and false otherwise.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.TryReadWithReuse(`0@)">
            <summary>
            Reads a single row into the existing instance of row,
            returning true if a row was available and false otherwise.
            
            Row will be initialized if need be.
            
            Note, it is possible for row to be initialized BUT for this method
            to return false.  In that case row should be ignored>
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.TryReadWithComment">
            <summary>
            Reads a single row or comment.
            
            Distinguish between a row, comment, or nothing by inspecting 
            ReadWithCommentResult(T).ResultType.
            
            Note, it is possible for row to be initialized BUT for this method
            to return a comment or no value.  In that case row should be ignored.
            </summary>
        </member>
        <member name="M:Cesil.IReader`1.TryReadWithCommentReuse(`0@)">
             <summary>
             Reads a single row (storing into an existing instance of a row
             if provided) or comment.
            
             Distinguish between a row, comment, or nothing by inspecting 
             ReadWithCommentResult(T).ResultType.
             
             Row will be initialized if need be.
             
             Note, it is possible for row to be initialized BUT for this method
             to return a comment or no value.  In that case row should be ignored.
             </summary>
        </member>
        <member name="T:Cesil.IWriter`1">
            <summary>
            Interface for synchronously writing rows.
            </summary>
        </member>
        <member name="M:Cesil.IWriter`1.WriteAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Write all rows in the provided enumerable.
            </summary>
        </member>
        <member name="M:Cesil.IWriter`1.Write(`0)">
            <summary>
            Write a single row.
            </summary>
        </member>
        <member name="M:Cesil.IWriter`1.WriteComment(System.String)">
            <summary>
            Write a comment as a row.
            
            Only supported if this IWriter's configuration has a way to indicate comments.
            
            If the comment contains the row ending character sequence, it will be written as multiple
            comment lines.
            </summary>
        </member>
        <member name="M:Cesil.IWriter`1.WriteComment(System.ReadOnlySpan{System.Char})">
            <summary>
            Write a comment as a row.
            
            Only supported if this IWriter's configuration has a way to indicate comments.
            
            If the comment contains the row ending character sequence, it will be written as multiple
            comment lines.
            </summary>
        </member>
        <member name="T:Cesil.NameLookup">
            <summary>
            This has two modes: 
             1. An adaptive radix tree
             2. A sorted array search with binary search
             
            The radix tree is faster and more compact, but can fail if names are reeeeaaaallly long.
            
            Binary search can handle names that are quite long, but does many more comparisons and 
              is less compact.
            
            ===
            
            The adaptix radix tree
            ----
            
            For some number of strings, each unique prefix is 
              found, and then sorted, and then stored in a Memory(char).
            
            After each prefix an offset is stored, which identifes the start
              of the branch to take.
            
            So if you have prefixes: foo, fizz, bar, bazz
            
            Unique prefixes are: f, ba
            Sorted they are: ba, f
            
            In memory we store (as chars)
            1,             2,          b,     a,   X             1,          f      X
            ^              ^           ^      ^    ^             ^           ^      ^
            # prefixes - 1 |           |      |    |             |           |      |
                           len prefix  |      |    |             |           |      |
                                       char   char |             |           |      |
                                                   offset branch |           |      |
                                                                 len prefix  char   offset branch
                                                             
            If the offset is zero or positive, then we've hit a leaf and it's a value.
            If the offset is negative, than we jump ahead the absolute value of the offset
              to get to the next branch.
              
            We store # of prefixes - 1, since there will always be at least one prefix.
            
            ===
            
            The binary search
            ----
            
            Strings are sorted, then a count of strings (as an int), then pairs of indexes and values.
              The indexes are absolute into the memory.
              The values are stored plain.
              The actual strings are in reverse order at the end of the memory.
            
            For the strings:
            
             - abc = 2
             - defg = 1
             - hijkl = 0
             
            we end up with:
             - count 3
             - 
            
            
             0: 0000, 0003,     // 3 strings (each int takes 2 chars)
             2: 0000, 0022,     // index of abc 
             4: 0000, 0002,     // value for abc
             6: 0000, 0018,     // index to defg
             8: 0000, 0001,     // value for defg
            10: 0000, 0014,     // index to hijkl
            12: 0000, 0000,     // value for hijkl
            14: h, i, j, k, l,  // string hijkl
            18: d, e, f, g,     // string defg
            22: a, b, c         // string abc
            
            The length of each string can be determined from the difference between each index, with a special case for the LAST string
              whose length can be calculated from the end of the memory.
            
            </summary>
        </member>
        <member name="T:Cesil.RowConstructor">
            <summary>
            Handles gluing InstanceProviders and Setters together for constructing an object.
            
            This is complicated by some providers being backed by a constructor that takes parameters,
               which means we may need to do considerable work before we could actually get a hold of
               a row instance.
               
            For extra fun, we allow mixing different kinds of setters and instance providers so we might 
               need to "hold" some values before an instance is available even if those values have simple
               setters.
               
            And then on top of that, the column order can vary per reader which means what needs to be "held"
               varies even then.
            </summary>
        </member>
        <member name="T:Cesil.ReadResult`1">
            <summary>
            Represents the result of an attempted read operation.
            </summary>
        </member>
        <member name="P:Cesil.ReadResult`1.HasValue">
            <summary>
            True if a value was read, false if not.
            
            If false, there are no more rows to be read.
            </summary>
        </member>
        <member name="P:Cesil.ReadResult`1.Value">
            <summary>
            The value read, if HasValue == true.
            
            Throws otherwise.
            </summary>
        </member>
        <member name="M:Cesil.ReadResult`1.ToString">
            <summary>
            Returns a representation of this ReadResult struct.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.ReadWithCommentResult`1">
            <summary>
            Represents the result of an attempted read operation which supports comments.
            </summary>
        </member>
        <member name="P:Cesil.ReadWithCommentResult`1.ResultType">
            <summary>
            Indicates what, if anything, is available on this result.
            
            If NoValue, no more results will be read.
            </summary>
        </member>
        <member name="P:Cesil.ReadWithCommentResult`1.HasValue">
            <summary>
            Convenience method for checking ResultType == HasValue
            </summary>
        </member>
        <member name="P:Cesil.ReadWithCommentResult`1.HasComment">
            <summary>
            Convenience method for checking ResultType == HasComment
            </summary>
        </member>
        <member name="P:Cesil.ReadWithCommentResult`1.Value">
            <summary>
            The value read, if ResultType == HasValue.
            
            Throws otherwise.
            </summary>
        </member>
        <member name="P:Cesil.ReadWithCommentResult`1.Comment">
            <summary>
            The comment read, if ResultType == HasComment.
            
            Throws otherwise.
            </summary>
        </member>
        <member name="M:Cesil.ReadWithCommentResult`1.ToString">
            <summary>
            Returns a representation of this ReadResult struct.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.ReadWithCommentResultType">
            <summary>
            Represents the type of a ReadWithCommentResult,
            either no value (end of records), having a value (of type T),
            or having a comment (always a string).
            </summary>
        </member>
        <member name="F:Cesil.ReadWithCommentResultType.NoValue">
            <summary>
            No value was read, the end of records has been reached.
            
            Subsequent attempts to read will fail.
            
            Equivalent to HasValue == false on ReadResult(T).
            </summary>
        </member>
        <member name="F:Cesil.ReadWithCommentResultType.HasValue">
            <summary>
            A value was read.
            
            Equivalent to HasValue == true on ReadResult(T).
            </summary>
        </member>
        <member name="F:Cesil.ReadWithCommentResultType.HasComment">
            <summary>
            A comment was read.
            </summary>
        </member>
        <member name="T:Cesil.DefaultTypeDescriber">
            <summary>
            The default implementation of ITypeDescriber used to
              determine how to (de)serialize types and how to convert
              dynamic cells and rows.
              
            It will serialize all public properties, any fields
              with a [DataMember], and will respect ShouldSerialize()
              methods.
              
            It will deserialize all public properties, any fields
              with a [DataMember], and will call Reset() methods.  Expects
              a public parameterless constructor for any deserialized types.
            
            It will convert cells to most built-in types, and map rows to
              POCOs, ValueTuples, Tuples, and IEnumerables.
            
            This type is unsealed to allow for easy extension of it's behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ClearCache">
            <summary>
            Clears any internal caches this instance has created.
            
            Caches may be used to accelerate member lookup or dynamic
              operations.
              
            Clearing caches is not necessary for correct functioning, 
              but may be useful to manage memory use.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.#ctor">
            <summary>
            Construct a new DefaultTypeDesciber.
            
            A pre-allocated instance is available on TypeDescribers.Default.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetInstanceProvider(System.Reflection.TypeInfo)">
            <summary>
            Gets an InstanceProvider that wraps the parameterless constructor
              for reference types, and the zero value for value types.
              
            Returns null if no InstanceProvider can be found.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.EnumerateMembersToDeserialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all columns to deserialize.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ShouldDeserialize(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the given property should be deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetDeserializationName(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the name of the column that should map to the given property when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetSetter(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the setter to use for the given property when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetParser(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the parser to use for the column that maps to the given property when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetOrder(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the index of the column that should map to the given property.  Headers
              can change this during deserialization.
              
            Return null to leave order unspecified.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetIsRequired(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns whether or not the given property is required during deserialization.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetReset(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the reset method, if any, to call prior to deserializing the given property.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ShouldDeserialize(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns true if the given field should be deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetDeserializationName(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the name of the column that should map to the given field when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetSetter(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the setter to use for the given field when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetParser(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the parser to use for the column that maps to the given property when deserialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetOrder(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the index of the column that should map to the given field.  Headers
              can change this during deserialization.
              
            Return null to leave order unspecified.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetIsRequired(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns whether or not the given field is required during deserialization.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetReset(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the reset method, if any, to call prior to deserializing the given field.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetParser(System.Reflection.TypeInfo)">
            <summary>
            Returns the parser to use for the given type.
            
            If you do not care about the member being parsed, override just this method
              as the other GetParser(...) methods delegate to it.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.EnumerateMembersToSerialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all columns to deserialize.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ShouldSerialize(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the given property should be serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetSerializationName(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the name of the column that should map to the given property when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetGetter(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the getter to use for the given property when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetShouldSerialize(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the ShouldSerializeXXX()-style method to use for the given property when serializing, if
              any.
             
            If specified, the method will be invoked for each record to determine whether to write
              the property.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetFormatter(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns the formatter to use for the column that maps to the given property when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetEmitDefaultValue(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Returns whether or not the default value should be serialized for the given property.
            
            For reference types, the default value is `null`.  For ValueTypes the default value
              is either 0 or the equivalent of initializing all of it's fields with their default
              values.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ShouldSerialize(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns true if the given field should be serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetGetter(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the getter to use for the given field when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetSerializationName(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the name of the column that should map to the given field when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetShouldSerialize(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the ShouldSerializeXXX()-style method to use for the given field when serializing, if
              any. By default, always returns null.
             
            If specified, the method will be invoked for each record to determine whether to write
              the field.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetFormatter(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns the formatter to use for the column that maps to the given field when serialized.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetEmitDefaultValue(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Returns whether or not the default value should be serialized for the given property.
            
            For reference types, the default value is `null`.  For ValueTypes the default value
              is either 0 or the equivalent of initializing all of it's fields with their default
              values.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetFormatter(System.Reflection.TypeInfo)">
            <summary>
            Returns the formatter to use for the given type.
            
            If you do not care about the member being parsed, override just this method
              as the other GetFormatter(...) methods delegate to it.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetCellsForDynamicRow(Cesil.WriteContext@,System.Object)">
            <summary>
            Enumerates cells on the given dynamic row.
            
            Null rows have no cells, but are legal.
            
            Rows created by Cesil have their cells enumerated as strings.
            
            Other dynamic types will have each member enumerated as either their
              actual type (if a formatter is available) or as a string.
            
            Override to tweak behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ShouldIncludeCell(System.String,Cesil.WriteContext@,System.Object)">
            <summary>
            Called in GetCellsForDynamicRow to determine whether a cell should be included.
            
            Override to customize behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetFormatter(System.Reflection.TypeInfo,System.String,Cesil.WriteContext@,System.Object)">
            <summary>
            Called in GetCellsForDynamicRow to determine the formatter that should be used for a cell.
            
            Override to customize behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetDynamicCellParserFor(Cesil.ReadContext@,System.Reflection.TypeInfo)">
            <summary>
            Returns a Parser that can be used to parse the targetType.
            
            Override to customize behavior.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.GetDynamicRowConverter(Cesil.ReadContext@,System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier},System.Reflection.TypeInfo)">
            <summary>
            Returns a DynamicRowConverter that can be used to parse the targetType,
               if a default parser for the type exists or a constructor accepting
               the appropriate number of objects (can be dynamic in source) is on 
               the type.
            </summary>
        </member>
        <member name="M:Cesil.DefaultTypeDescriber.ToString">
            <summary>
            Returns a representation of this DefaultTypeDescriber object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.DeserializableMember">
            <summary>
            Represents a member of a type to use when deserializing.
            </summary>
        </member>
        <member name="P:Cesil.DeserializableMember.Name">
            <summary>
            The name of the column that maps to this member.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a DeserializableMember for the given property.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name and parser.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name, parser, and whether it is required.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name, parser, whether it is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForField(System.Reflection.FieldInfo)">
            <summary>
            Creates a DeserializableMember for the given field.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForField(System.Reflection.FieldInfo,System.String)">
            <summary>
            Creates a DeserializableMember for the given field, with the given name.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Parser)">
            <summary>
            Creates a DeserializableMember for the given field, with the given name and parser.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name, parser, and whether it is required.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Creates a DeserializableMember for the given property, with the given name, parser, whether it is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.Create(System.Reflection.TypeInfo,System.String,Cesil.Setter,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Create a DeserializableMember with an explicit type being serialized, name, setter, parser, whether it is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given DeserializableMember.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.Equals(Cesil.DeserializableMember)">
            <summary>
            Returns true if this object equals the given DeserializableMember.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.GetHashCode">
            <summary>
            Returns a stable hash for this DeserializableMember.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.ToString">
            <summary>
            Describes this DeserializableMember.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.op_Equality(Cesil.DeserializableMember,Cesil.DeserializableMember)">
            <summary>
            Compare two DeserializableMembers for equality
            </summary>
        </member>
        <member name="M:Cesil.DeserializableMember.op_Inequality(Cesil.DeserializableMember,Cesil.DeserializableMember)">
            <summary>
            Compare two DeserializableMembers for inequality
            </summary>
        </member>
        <member name="T:Cesil.DynamicCellValue">
            <summary>
            Wrapper around a dynamic cell which is to be written
              by an I(Async)Writer.
            </summary>
        </member>
        <member name="P:Cesil.DynamicCellValue.HasName">
            <summary>
            Returns true if Name is set.
            </summary>
        </member>
        <member name="P:Cesil.DynamicCellValue.Name">
            <summary>
            Name of the column the cell belongs to, throws if Name is not set.
            </summary>
        </member>
        <member name="P:Cesil.DynamicCellValue.Value">
            <summary>
            Cell value
            </summary>
        </member>
        <member name="P:Cesil.DynamicCellValue.Formatter">
            <summary>
            Instance of Formatter to use when formatting the associated value
              for writing.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.Create(System.String,System.Object,Cesil.Formatter)">
            <summary>
            Create a DynamicCellValue to format the given value of the given column.
            
            It's permissible for both name and value to be null.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given DynamicCellValue.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.Equals(Cesil.DynamicCellValue)">
            <summary>
            Returns true if this object equals the given DynamicCellValue.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.GetHashCode">
            <summary>
            Returns a stable hash for this DynamicCellValue.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.ToString">
            <summary>
            Returns a representation of this DynamicCellValue struct.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.op_Equality(Cesil.DynamicCellValue,Cesil.DynamicCellValue)">
            <summary>
            Compare two DynamicCellValues for equality
            </summary>
        </member>
        <member name="M:Cesil.DynamicCellValue.op_Inequality(Cesil.DynamicCellValue,Cesil.DynamicCellValue)">
            <summary>
            Compare two DynamicCellValues for inequality
            </summary>
        </member>
        <member name="T:Cesil.ITypeDescriber">
            <summary>
            The interface used to discover the members to (de)serialize for a type.
            
            DefaultTypeDescriber, ManualTypeDescriber, and SurrogateTypeDescriber all implement
              this interface and handle the most common desired configurations.
              
            Note to implementors: All ITypeDescriber methods must be thread safe, as they are invoked 
              as needed during operation with no guarantee about the calling thread(s).
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.GetInstanceProvider(System.Reflection.TypeInfo)">
            <summary>
            Get the provider for instances of forType.
            
            Returns null if no InstanceProvider could be found.
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.EnumerateMembersToSerialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to serialize.
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.EnumerateMembersToDeserialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to deserialize.
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.GetDynamicCellParserFor(Cesil.ReadContext@,System.Reflection.TypeInfo)">
            <summary>
            Called to determine how to convert a dynamic cell.
            
            Returns null if no Parser could be found.
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.GetDynamicRowConverter(Cesil.ReadContext@,System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier},System.Reflection.TypeInfo)">
            <summary>
            Called to determine how to convert an entire dynamic row into the given type.
            
            Returns null if no DynamicRowConverter could be found.
            </summary>
        </member>
        <member name="M:Cesil.ITypeDescriber.GetCellsForDynamicRow(Cesil.WriteContext@,System.Object)">
            <summary>
            Called to determine the cells that make up the given dynamic row.
            
            Used to enumerate cells when serializing dynamically.
            </summary>
        </member>
        <member name="T:Cesil.ManualTypeDescriber">
            <summary>
            An ITypeDescriber that takes lets you register explicit members to return
              when one of the EnumerateXXX() methods are called.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.CreateBuilder">
            <summary>
            Create a new ManualTypeDescriberBuilder which fallbacks to TypeDescribers.Default when a type with
               no registered members is requested.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.CreateBuilder(Cesil.ManualTypeDescriberFallbackBehavior)">
            <summary>
            Create a new empty ManualTypeDescriberBuilder with the given fallback behavior, and a fallback ITypeDescriber of TypeDescribers.Default.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.CreateBuilder(Cesil.ManualTypeDescriberFallbackBehavior,Cesil.ITypeDescriber)">
            <summary>
            Create a new empty ManualTypeDescriberBuilder with the given fallback behavior.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.CreateBuilder(Cesil.ManualTypeDescriber)">
            <summary>
            Create a new ManualTypeDescriberBuilder that copies it's
              initial values from the given ManualTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.GetInstanceProvider(System.Reflection.TypeInfo)">
            <summary>
            Returns the registered InstanceProvider for the given TypeInfo.
            
            If no provider has been registered, will either delegate to a fallback
               ITypeProvider or throw an exception depending on configuration.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.EnumerateMembersToDeserialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to deserialize.
            
            If no members has been registered, will either delegate to a fallback
               ITypeProvider or throw an exception depending on configuration.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.EnumerateMembersToSerialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to serialize.
            
            If no members has been registered, will either delegate to a fallback
               ITypeProvider or throw an exception depending on configuration.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.ToString">
            <summary>
            Returns a representation of this ManualTypeDescriber object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.GetDynamicCellParserFor(Cesil.ReadContext@,System.Reflection.TypeInfo)">
            <summary>
            Delegates to DefaultTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.GetDynamicRowConverter(Cesil.ReadContext@,System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier},System.Reflection.TypeInfo)">
            <summary>
            Delegates to DefaultTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.GetCellsForDynamicRow(Cesil.WriteContext@,System.Object)">
            <summary>
            Delegates to DefaultTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.Equals(System.Object)">
            <summary>
            Returns true if this ManualTypeDescriber equals the given object
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.GetHashCode">
            <summary>
            Returns a stable hash for this ManualTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.Equals(Cesil.ManualTypeDescriber)">
            <summary>
            Returns true if this ManualTypeDescriber equals the given ManualTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.op_Equality(Cesil.ManualTypeDescriber,Cesil.ManualTypeDescriber)">
            <summary>
            Compare two ManualTypeDescriber for equality
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriber.op_Inequality(Cesil.ManualTypeDescriber,Cesil.ManualTypeDescriber)">
            <summary>
            Compare two ManualTypeDescriber for inequality
            </summary>
        </member>
        <member name="T:Cesil.ManualTypeDescriberBuilder">
            <summary>
            Builder for creating a ManualTypeDescriber.
            
            Creates ITypeDescribers explicitly registered members to return
              when one of the EnumerateXXX() methods are called.
            </summary>
        </member>
        <member name="P:Cesil.ManualTypeDescriberBuilder.FallbackBehavior">
            <summary>
            The configured behavior to use when a type has no registered members or providers (depending on the method invoked).
            </summary>
        </member>
        <member name="P:Cesil.ManualTypeDescriberBuilder.FallbackTypeDescriber">
            <summary>
            ITypeDescriber that is used to discover providers or enumerate members if no registration exists
            and FallbackBehavior allows falling back.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.CreateBuilder">
            <summary>
            Create a new ManualTypeDescriberBuilder which fallbacks to TypeDescribers.Default when a type with
               no registered members is requested.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.CreateBuilder(Cesil.ManualTypeDescriberFallbackBehavior)">
            <summary>
            Create a new empty ManualTypeDescriberBuilder with the given fallback behavior, and a fallback ITypeDescriber of TypeDescribers.Default.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.CreateBuilder(Cesil.ManualTypeDescriberFallbackBehavior,Cesil.ITypeDescriber)">
            <summary>
            Create a new empty ManualTypeDescriberBuilder with the given fallback behavior.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.CreateBuilder(Cesil.ManualTypeDescriber)">
            <summary>
            Create a new ManualTypeDescriberBuilder that copies it's
              initial values from the given ManualTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.ToManualTypeDescriber">
            <summary>
            Create a ManualTypeDescriber with the options configured with this builder.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithFallbackBehavior(Cesil.ManualTypeDescriberFallbackBehavior)">
            <summary>
            Sets the behavior to fallback to when a method has no registrations to return.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithFallbackTypeDescriber(Cesil.ITypeDescriber)">
            <summary>
            Sets the ITypeDescriber to fallback to, provided that FallbackBehavior allows falling back, 
              when a method has no registrations to return.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithInstanceProvider(Cesil.InstanceProvider)">
            <summary>
            Set the delegate to use when constructing new instances of 
              type T.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithInstanceProvider(System.Reflection.TypeInfo,Cesil.InstanceProvider)">
            <summary>
            Set the delegate to use when constructing new instances of 
              the given type.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitGetter(System.Reflection.TypeInfo,System.String,Cesil.Getter)">
            <summary>
            Add a getter for the given type, with the given name, using the given getter.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitGetter(System.Reflection.TypeInfo,System.String,Cesil.Getter,Cesil.Formatter)">
            <summary>
            Add a getter for the given type, with the given name, using the given getter, and formatter.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitGetter(System.Reflection.TypeInfo,System.String,Cesil.Getter,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Add a getter for the given type, with the given name, using the given getter, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitGetter(System.Reflection.TypeInfo,System.String,Cesil.Getter,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Add a getter for the given type, with the given name, using the given getter, formatter, ShouldSerialize method, and whether to emit a default value.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Add a field to serialize for the given type.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String)">
            <summary>
            Add a field to serialize for the given type, using the given name.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Formatter)">
            <summary>
            Add a field to serialize for the given type, using the given name and formatter.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Add a field to serialize for the given type, using the given name, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Add a field to serialize for the given type, using the given name, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.FieldInfo)">
            <summary>
            Add a field to serialize for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.FieldInfo,System.String)">
            <summary>
            Add a field to serialize with the given name - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.FieldInfo,System.String,Cesil.Formatter)">
            <summary>
            Add a field to serialize with the given name and formatter - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Add a field to serialize with the given name, formatter, and ShouldSerialize method - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableField(System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Add a field to serialize with the given name, formatter, ShouldSerialize method, and whether to emit a default value - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Add a property to serialize for the given type.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Add a property to serialize for the given type with the given name.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Formatter)">
            <summary>
            Add a property to serialize for the given type with the given name and formatter.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Add a property to serialize for the given type with the given name, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Add a property to serialize for the given type with the given name, formatter, ShouldSerialize method, and whether to emit a default value.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Add a property to serialize for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Add a property to serialize with the given name - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter)">
            <summary>
            Add a property to serialize with the given name and formatter - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Add a property to serialize with the given name, formatter, and ShouldSerialize method - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithSerializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Add a property to serialize with the given name, formatter, ShouldSerialize method, and whether to emit a default value - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitSetter(System.Reflection.TypeInfo,System.String,Cesil.Setter)">
            <summary>
            Add a setter for the given type, with the given name, using the given setter.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitSetter(System.Reflection.TypeInfo,System.String,Cesil.Setter,Cesil.Parser)">
            <summary>
            Add a setter for the given type, with the given name, using the given setter and parser.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitSetter(System.Reflection.TypeInfo,System.String,Cesil.Setter,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Add a setter for the given type, with the given name, using the given setter, parser, and whether the column is required.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithExplicitSetter(System.Reflection.TypeInfo,System.String,Cesil.Setter,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Add a setter for the given type, with the given name, using the given setter, parser, whether the column is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo)">
            <summary>
            Add a field to deserialize for the given type.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String)">
            <summary>
            Add a field to deserialize for the given type with the given name.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Parser)">
            <summary>
            Add a field to deserialize for the given type with the given name and parser.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Add a field to deserialize for the given type with the given name, parser, and whether the column is required.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.TypeInfo,System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Add a field to deserialize for the given type with the given name, parser, whether the column is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.FieldInfo)">
            <summary>
            Add a field to deserialize for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.FieldInfo,System.String)">
            <summary>
            Add a field to deserialize with the given name - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.FieldInfo,System.String,Cesil.Parser)">
            <summary>
            Add a field to deserialize with the given name and parser - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Add a field to deserialize with the given name, parser, and whether the column is required - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableField(System.Reflection.FieldInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Add a field to deserialize with the given name, parser, whether the column is required, and a reset method - for the type which declares the field.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Add a property to deserialize for the given type.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Add a property to deserialize for the given type with the given name.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Parser)">
            <summary>
            Add a property to deserialize for the given type with the given name and parser.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Add a property to deserialize for the given type with the given name and parser and whether the column is required.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.TypeInfo,System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Add a property to deserialize for the given type with the given name and parser, whether the column is required, and a reset method.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Add a property to deserialize for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Add a property to deserialize with the given name - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser)">
            <summary>
            Add a property to deserialize with the given name and parser - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired)">
            <summary>
            Add a property to deserialize with the given name, parser, and whether the column is required - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.WithDeserializableProperty(System.Reflection.PropertyInfo,System.String,Cesil.Parser,Cesil.MemberRequired,Cesil.Reset)">
            <summary>
            Add a property to deserialize with the given name, parser, whether the column is required, and a reset method - for the type which declares the property.
            </summary>
        </member>
        <member name="M:Cesil.ManualTypeDescriberBuilder.ToString">
            <summary>
            Returns a representation of this ManualTypeDescriber object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.ManualTypeDescriberFallbackBehavior">
            <summary>
            How to behave if a ManualTypeDescriber needs to
              describe a type that isn't explicitly configured.
            </summary>
        </member>
        <member name="F:Cesil.ManualTypeDescriberFallbackBehavior.Throw">
            <summary>
            Throw if no type is configured.
            </summary>
        </member>
        <member name="F:Cesil.ManualTypeDescriberFallbackBehavior.UseFallback">
            <summary>
            Use a fallback ITypeDescriber if no type is configured.
            </summary>
        </member>
        <member name="T:Cesil.MemberRequired">
            <summary>
            Whether or not a member is required during deserialization.
            </summary>
        </member>
        <member name="F:Cesil.MemberRequired.Yes">
            <summary>
            A member must be present, it is
            an error to omit it.
            </summary>
        </member>
        <member name="F:Cesil.MemberRequired.No">
            <summary>
            A member does not have to be present,
            it is not an error if it is omitted.
            </summary>
        </member>
        <member name="T:Cesil.SerializableMember">
            <summary>
            Represents a member of a type to use when serializing.
            </summary>
        </member>
        <member name="P:Cesil.SerializableMember.Name">
            <summary>
            The name of the column that maps to this member.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a SerializableMember for the given property.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Creates a SerializableMember for the given property, with the given name.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter)">
            <summary>
            Creates a SerializableMember for the given property, with the given name and formatter.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Creates a SerializableMember for the given property, with the given name, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForProperty(System.Reflection.PropertyInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Creates a SerializableMember for the given property, with the given name, formatter, ShouldSerialize method, and whether to emit a default value.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForField(System.Reflection.FieldInfo)">
            <summary>
            Creates a SerializableMember for the given field.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForField(System.Reflection.FieldInfo,System.String)">
            <summary>
            Creates a SerializableMember for the given field, with the given name.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Formatter)">
            <summary>
            Creates a SerializableMember for the given field, with the given name and formatter.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize)">
            <summary>
            Creates a SerializableMember for the given field, with the given name, formatter, and ShouldSerialize method.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ForField(System.Reflection.FieldInfo,System.String,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Creates a SerializableMember for the given field, with the given name, formatter, ShouldSerialize method, and whether to emit a default value.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.Create(System.Reflection.TypeInfo,System.String,Cesil.Getter,Cesil.Formatter,Cesil.ShouldSerialize,Cesil.EmitDefaultValue)">
            <summary>
            Create a SerializableMember with an explicit type being serialized, name, getter, formatter, ShouldSerialize method, and whether to emit a default value.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given SerializableMember.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.Equals(Cesil.SerializableMember)">
            <summary>
            Returns true if this object equals the given SerializableMember.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.GetHashCode">
            <summary>
            Returns a stable hash for this SerializableMember.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.ToString">
            <summary>
            Describes this SerializableMember.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.op_Equality(Cesil.SerializableMember,Cesil.SerializableMember)">
            <summary>
            Compare two SerializableMembers for equality
            </summary>
        </member>
        <member name="M:Cesil.SerializableMember.op_Inequality(Cesil.SerializableMember,Cesil.SerializableMember)">
            <summary>
            Compare two SerializableMembers for inequality
            </summary>
        </member>
        <member name="T:Cesil.SurrogateTypeDescriber">
            <summary>
            A ITypeDesciber that enumerates members on a surrogate type and maps them to another type.
            
            Used when you don't control the type you need to (de)serialize - you markup the surrogate type
              and then the uncontrolled type is (de)serialized as if it were the surrogate type.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.CreateBuilder">
            <summary>
            Creates a SurrogateTypeDescriberBuilder which using TypeDescriber.Default to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior.
            
            Uses TypeDescriber.Default to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered and the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior,Cesil.ITypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior and type describer.
            
            Uses the given ITypeDescriber to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered if the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior,Cesil.ITypeDescriber,Cesil.ITypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior, type describer, and fallback type describer.
            
            Uses the given ITypeDescriber to describes surrogates,
              and falls back to provided fallback if no surrogate is registered and the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.CreateBuilder(Cesil.SurrogateTypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder which copies it's fallback behavior, type describer, fallback type describer, and
              surrogate types from the given SurrogateTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.EnumerateMembersToDeserialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to deserialize.
            
            If a surrogate is registered, the surrogate will be used for discovery - the returned 
              members will be mapped from the surrogate to forType.
              
            If a surrogate is not registered, either an exception will be thrown or forType will
              be passed to TypeDescriber.EnumerateMembersToDeserialize depending on the value of
              ThrowOnNoRegisteredSurrogate.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.EnumerateMembersToSerialize(System.Reflection.TypeInfo)">
            <summary>
            Enumerate all the members on forType to serialize.
            
            If a surrogate is registered, the surrogate will be used for discovery - the returned 
              members will be mapped from the surrogate to forType.
              
            If a surrogate is not registered, either an exception will be thrown or forType will
              be passed to TypeDescriber.EnumerateMembersToSerialize depending on the value of
              ThrowOnNoRegisteredSurrogate.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.GetInstanceProvider(System.Reflection.TypeInfo)">
            <summary>
            Gets an instance builder usable to construct the given type.
            
            If a surrogate is registered, the surrogate will be used for discovery - the returned 
              constructor will be mapped from the surrogate to forType.
              
            If a surrogate is not registered, either an exception will be thrown or forType will
              be passed to TypeDescriber.GetInstanceProvider depending on the value of
              ThrowOnNoRegisteredSurrogate.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.GetHashCode">
            <summary>
            Returns a stable hash for this SurrogateTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.Equals(System.Object)">
            <summary>
            Returns true if this SurrogateTypeDescriber equals the given object
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.Equals(Cesil.SurrogateTypeDescriber)">
            <summary>
            Returns true if this SurrogateTypeDescriber equals the given SurrogateTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.ToString">
            <summary>
            Returns a representation of this SurrogateTypeDescriber object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.GetDynamicCellParserFor(Cesil.ReadContext@,System.Reflection.TypeInfo)">
            <summary>
            Delegates to TypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.GetDynamicRowConverter(Cesil.ReadContext@,System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier},System.Reflection.TypeInfo)">
            <summary>
            Delegates to TypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.GetCellsForDynamicRow(Cesil.WriteContext@,System.Object)">
            <summary>
            Delegates to TypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.op_Equality(Cesil.SurrogateTypeDescriber,Cesil.SurrogateTypeDescriber)">
            <summary>
            Compare two SurrogateTypeDescribers for equality
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriber.op_Inequality(Cesil.SurrogateTypeDescriber,Cesil.SurrogateTypeDescriber)">
            <summary>
            Compare two SurrogateTypeDescribers for inequality
            </summary>
        </member>
        <member name="T:Cesil.SurrogateTypeDescriberBuilder">
            <summary>
            Builder for creating a SurrogateTypeDescriber.
            
            Creates ITypeDescribers that inspects one type to determine who to
              (de)serialize another type.
              
            Used when you don't control the type you need to (de)serialize - you markup the surrogate type
              and then the uncontrolled type is (de)serialized as if it were the surrogate type.
            </summary>
        </member>
        <member name="P:Cesil.SurrogateTypeDescriberBuilder.TypeDescriber">
            <summary>
            ITypeDescriber to use to discover providers and enumerate members on surrogate types.
            </summary>
        </member>
        <member name="P:Cesil.SurrogateTypeDescriberBuilder.FallbackTypeDescriber">
            <summary>
            ITypeDescriber that is used to discover providers or enumerate members if no registration exists
            and FallbackBehavior allows falling back.
            </summary>
        </member>
        <member name="P:Cesil.SurrogateTypeDescriberBuilder.FallbackBehavior">
            <summary>
            The configured behavior to use when a type has no registered surrogate.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.CreateBuilder">
            <summary>
            Creates a SurrogateTypeDescriberBuilder which using TypeDescriber.Default to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior.
            
            Uses TypeDescriber.Default to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered and the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior,Cesil.ITypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior and type describer.
            
            Uses the given ITypeDescriber to describes surrogates,
              and falls back to TypeDescriber.Default if no surrogate is registered if the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.CreateBuilder(Cesil.SurrogateTypeDescriberFallbackBehavior,Cesil.ITypeDescriber,Cesil.ITypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder with the given fallback behavior, type describer, and fallback type describer.
            
            Uses the given ITypeDescriber to describes surrogates,
              and falls back to provided fallback if no surrogate is registered and the provided SurrogateTypeDescriberFallbackBehavior
              allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.CreateBuilder(Cesil.SurrogateTypeDescriber)">
            <summary>
            Creates a SurrogateTypeDescriberBuilder which copies it's fallback behavior, type describer, fallback type describer, and
              surrogate types from the given SurrogateTypeDescriber.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.ToSurrogateTypeDescriber">
            <summary>
            Create a SurrogateTypeDescriber with the options configured with this builder.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.WithFallbackBehavior(Cesil.SurrogateTypeDescriberFallbackBehavior)">
            <summary>
            Sets the behavior to fallback to when no surrogate type has been registered.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.WithTypeDescriber(Cesil.ITypeDescriber)">
            <summary>
            Sets the ITypeDescriber to use to discover providers and members on a surrogate type.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.WithFallbackTypeDescriber(Cesil.ITypeDescriber)">
            <summary>
            Sets the ITypeDescriber to use when no surrogate type has been registered, provided FallbackBehavior allows it.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.WithSurrogateType(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            Registered a surrogate type for forType.
            
            Whenever forType is passed to one of the EnumerateXXX methods, surrogateType
              will be used to discover members instead.  The discovered members will then
              be mapped to forType, and returned.
            </summary>
        </member>
        <member name="M:Cesil.SurrogateTypeDescriberBuilder.ToString">
            <summary>
            Returns a representation of this SurrogateTypeDescriberBuilder object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="T:Cesil.SurrogateTypeDescriberFallbackBehavior">
            <summary>
            How to behave if a SurrogateTypeDescriber needs to
              describe a type that isn't explicitly configured.
            </summary>
        </member>
        <member name="F:Cesil.SurrogateTypeDescriberFallbackBehavior.Throw">
            <summary>
            Throw if no type is configured.
            </summary>
        </member>
        <member name="F:Cesil.SurrogateTypeDescriberFallbackBehavior.UseFallback">
            <summary>
            Use a fallback ITypeDescriber if no type is configured.
            </summary>
        </member>
        <member name="T:Cesil.TypeDescribers">
            <summary>
            Holds references to pre-allocated TypeDescibers.
            </summary>
        </member>
        <member name="F:Cesil.TypeDescribers.Default">
            <summary>
            An instance of DefaultTypeDescriber.
            
            This instance is used in cases where an ITypeDescriber has not been
              configured.
            </summary>
        </member>
        <member name="T:Cesil.DynamicRowConverterDelegate`1">
            <summary>
            Delegate type for DynamicRowConverters.
            </summary>
        </member>
        <member name="T:Cesil.DynamicRowConverter">
            <summary>
            Describes how to convert a dynamic row value
              into an instance of a type.
              
            Conversions can implemented as constructors taking a single 
              dynamic/object, constructors taking typed parameters, an 
              empty constructor paired with setter methods,
              or static methods.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.Else(Cesil.DynamicRowConverter)">
            <summary>
            Create a new converter that will try this converter, but if it returns false
              it will then try the given fallback DynamicRowConverter.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ForDelegate``1(Cesil.DynamicRowConverterDelegate{``0})">
            <summary>
            Create a DynamicRowConverter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ForConstructorTakingDynamic(System.Reflection.ConstructorInfo)">
            <summary>
            Create a DynamicRowConverter from the given constructor.
            
            Constructor must take an object (which can be dynamic in source).
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ForConstructorTakingTypedParameters(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier})">
            <summary>
            Create a DynamicRowConverter for the given constructor, which maps specific columns to the parameters
              for the of the constructor.
              
            Constructor must take the same number of parameters as column indexes passed in.
            
            Mapping will use column names if available, and fallback to indexes.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ForEmptyConstructorAndSetters(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Cesil.Setter},System.Collections.Generic.IEnumerable{Cesil.ColumnIdentifier})">
            <summary>
            Create a DynamicRowConverter for the given zero parameter constructor, which will call each setter
              with the column indicated in the passed column to setters.
              
            The same number of setters and columns must be passed.
            
            Mapping will use column names if available, and fallback to indexes.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a DynamicRowConverter from the given method.
            
            Method must be static, return a bool, take an object (which can be dynamic in source)
              as it's first parameter, a ReadContext as it's second parameter, and have a third parameter that is an out 
              for the result value.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.ToString">
            <summary>
            Returns a representation of this DynamicRowConverter object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.Equals(System.Object)">
            <summary>
            Returns true if the given object is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.Equals(Cesil.DynamicRowConverter)">
            <summary>
            Returns true if the given DynamicRowConverter is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.GetHashCode">
            <summary>
            Returns a stable hash for this DynamicRowConverter.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.op_Equality(Cesil.DynamicRowConverter,Cesil.DynamicRowConverter)">
            <summary>
            Compare two DynamicRowConverters for equality
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.op_Inequality(Cesil.DynamicRowConverter,Cesil.DynamicRowConverter)">
            <summary>
            Compare two DynamicRowConverters for inequality
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.op_Explicit(System.Reflection.MethodInfo)~Cesil.DynamicRowConverter">
            <summary>
            Convenience operator, equivalent to calling DynamicRowConverter.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.op_Explicit(System.Reflection.ConstructorInfo)~Cesil.DynamicRowConverter">
            <summary>
            Convenience operator, equivalent to calling DynamicRowConverter.ForConstructorTakingDynamic if non-null.
            
            Returns null if cons is null.
            </summary>
        </member>
        <member name="M:Cesil.DynamicRowConverter.op_Explicit(System.Delegate)~Cesil.DynamicRowConverter">
            <summary>
            Convenience operator, equivalent to calling DynamicRowConverter.ForDelegate if non-null.
            
            Returns null if cons is null.
            </summary>
        </member>
        <member name="T:Cesil.EmitDefaultValue">
            <summary>
            Whether or not the default value for a member will be serialized.
            </summary>
        </member>
        <member name="F:Cesil.EmitDefaultValue.Yes">
            <summary>
            A member must be present, it is
            an error to omit it.
            </summary>
        </member>
        <member name="F:Cesil.EmitDefaultValue.No">
            <summary>
            A member does not have to be present,
            it is not an error if it is omitted.
            </summary>
        </member>
        <member name="T:Cesil.FormatterDelegate`1">
            <summary>
            Delegate type for formatters.
            </summary>
        </member>
        <member name="T:Cesil.Formatter">
            <summary>
            Represents code used to format a value into a IBufferWriter(char).
            
            Wraps either a static method or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.Else(Cesil.Formatter)">
            <summary>
            Create a new formatter that will try this formatter, but if it returns false
              it will then try the given fallback Formatter.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a formatter from a method.
            
            Formatter needs to:
              * be static
              * take
                - the type to be formatter (or one it is assignable to)
                - an in (or by ref) WriteContext
                -an IBufferWriter(char)
              * return bool (false indicates insufficient space was available)
            </summary>
        </member>
        <member name="M:Cesil.Formatter.ForDelegate``1(Cesil.FormatterDelegate{``0})">
            <summary>
            Create a Formatter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.GetDefault(System.Reflection.TypeInfo)">
            <summary>
            Returns the default formatter for the given type, if one exists.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.Equals(System.Object)">
            <summary>
            Compares for equality to another Formatter.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.Equals(Cesil.Formatter)">
            <summary>
            Compares for equality to another Formatter.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.GetHashCode">
            <summary>
            Returns a hash code for this Getter.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.ToString">
            <summary>
            Describes this Formatter.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.op_Explicit(System.Reflection.MethodInfo)~Cesil.Formatter">
            <summary>
            Convenience operator, equivalent to calling Formatter.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.op_Explicit(System.Delegate)~Cesil.Formatter">
            <summary>
            Convenience operator, equivalent to calling Formatter.ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="M:Cesil.Formatter.op_Equality(Cesil.Formatter,Cesil.Formatter)">
            <summary>
            Compare two Formatters for equality
            </summary>
        </member>
        <member name="M:Cesil.Formatter.op_Inequality(Cesil.Formatter,Cesil.Formatter)">
            <summary>
            Compare two Formatters for inequality
            </summary>
        </member>
        <member name="T:Cesil.StaticGetterDelegate`1">
            <summary>
            Delegate type for getters that doesn't take a row.
            </summary>
        </member>
        <member name="T:Cesil.GetterDelegate`2">
            <summary>
            Delegate type for getters.
            </summary>
        </member>
        <member name="T:Cesil.Getter">
            <summary>
            Represents code used to get a value from a type.
            
            Wraps a static method, an instance method, a field, or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Getter.ForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Create a getter from a PropertyInfo.
            
            Throws if the property does not have a getter.
            </summary>
        </member>
        <member name="M:Cesil.Getter.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a getter from a method.
            
            getter can be an instance method or a static method
              if it's a static method, it can take 0, 1, or 2 parameters
                 - if there is 1 parameter, it may be an `in WriteContext` or the row type
                 - if there are 2 parameters, the first must be the row type, and the second must be `in WriteContext`
              if it's an instance method, it can only take 0 or 1 parameters
                 - if it takes a parameter, it must be an `in WriteContext`
            </summary>
        </member>
        <member name="M:Cesil.Getter.ForField(System.Reflection.FieldInfo)">
            <summary>
            Create a getter from a field.
            
            field can be an instance field or a static field.        
            </summary>
        </member>
        <member name="M:Cesil.Getter.ForDelegate``2(Cesil.GetterDelegate{``0,``1})">
            <summary>
            Create a Getter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Getter.ForDelegate``1(Cesil.StaticGetterDelegate{``0})">
            <summary>
            Create a Getter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Getter.Equals(System.Object)">
            <summary>
            Compares for equality to another Getter.
            </summary>
        </member>
        <member name="M:Cesil.Getter.Equals(Cesil.Getter)">
            <summary>
            Compares for equality to another Getter.
            </summary>
        </member>
        <member name="M:Cesil.Getter.GetHashCode">
            <summary>
            Returns a hash code for this Getter.
            </summary>
        </member>
        <member name="M:Cesil.Getter.ToString">
            <summary>
            Describes this Getter.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.Getter.op_Explicit(System.Reflection.MethodInfo)~Cesil.Getter">
            <summary>
            Convenience operator, equivalent to calling Getter.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.Getter.op_Explicit(System.Reflection.FieldInfo)~Cesil.Getter">
            <summary>
            Convenience operator, equivalent to calling Getter.ForField if non-null.
            
            Returns null if field is null.
            </summary>
        </member>
        <member name="M:Cesil.Getter.op_Explicit(System.Delegate)~Cesil.Getter">
            <summary>
            Convenience operator, equivalent to calling Getter.ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="M:Cesil.Getter.op_Equality(Cesil.Getter,Cesil.Getter)">
            <summary>
            Compare two Getters for equality
            </summary>
        </member>
        <member name="M:Cesil.Getter.op_Inequality(Cesil.Getter,Cesil.Getter)">
            <summary>
            Compare two Getters for inequality
            </summary>
        </member>
        <member name="T:Cesil.InstanceProviderDelegate`1">
            <summary>
            Delegate used to create InstanceProviders.
            </summary>
        </member>
        <member name="T:Cesil.InstanceProvider">
            <summary>
            Represents a way to obtain an instance of a type.
            
            This can be backed by a zero-parameter constructor, a constructor
              taking typed parameters, a static method, or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.Else(Cesil.InstanceProvider)">
            <summary>
            Create a new instance provider that will try this instance provider, but if it returns false
              it will then try the given fallback InstanceProvider.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Creates a new InstanceProvider from a method.
            
            The method must:
              - be static
              - return a bool
              - have two parameters
              - the first must be an in ReadContext
              - the second must be an out parameter of the constructed type
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.ForParameterlessConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Create a new InstanceProvider from a parameterless constructor.
            
            The constructed type must be concrete, that is:
              - not an interface
              - not an abstract class
              - not a generic parameter
              - not an unbound generic type (ie. a generic type definition)
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.ForConstructorWithParameters(System.Reflection.ConstructorInfo)">
            <summary>
            Create a new InstanceProvider from a constructor that takes parameters.
            
            An InstanceProvider of this type must be paired with Setters that map to the parameters
              on this constructor.
            
            The constructed type must be concrete, that is:
              - not an interface
              - not an abstract class
              - not a generic parameter
              - not an unbound generic type (ie. a generic type definition)
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.ForDelegate``1(Cesil.InstanceProviderDelegate{``0})">
            <summary>
            Create a new InstanceProvider from delegate.
            
            There are no restrictions on what the give delegate may do,
              but be aware that it may be called from many different contexts.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.GetDefault(System.Reflection.TypeInfo)">
            <summary>
            Returns the default instance provider for the given type, if one exists.
            
            For reference types, it will use the parameterless constructor.
            
            For value types, it will use the all-zero (aka default) value.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given InstanceProvider.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.Equals(Cesil.InstanceProvider)">
            <summary>
            Returns true if this object equals the given InstanceProvider.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.GetHashCode">
            <summary>
            Returns a stable hash for this InstanceProvider.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.ToString">
            <summary>
            Returns a representation of this InstanceProvider object.
            
            Only for debugging, this value is not guaranteed to be stable.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.op_Explicit(System.Reflection.MethodInfo)~Cesil.InstanceProvider">
            <summary>
            Convenience operator, equivalent to calling ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.op_Explicit(System.Reflection.ConstructorInfo)~Cesil.InstanceProvider">
            <summary>
            Convenience operator, equivalent to calling ForParameterlessConstructor or ForConstructorWithParameters if non-null.
            
            Returns null if field is null.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.op_Explicit(System.Delegate)~Cesil.InstanceProvider">
            <summary>
            Convenience operator, equivalent to calling ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.op_Equality(Cesil.InstanceProvider,Cesil.InstanceProvider)">
            <summary>
            Compare two InstanceProviders for equality
            </summary>
        </member>
        <member name="M:Cesil.InstanceProvider.op_Inequality(Cesil.InstanceProvider,Cesil.InstanceProvider)">
            <summary>
            Compare two InstanceProvider for inequality
            </summary>
        </member>
        <member name="T:Cesil.ParserDelegate`1">
            <summary>
            Delegate type for parsers.
            </summary>
        </member>
        <member name="T:Cesil.Parser">
            <summary>
            Represents code used to parse values into concrete types.
            
            Wraps a static method, a constructor taking a single
              ReadOnlySpan(char), a constuctor taking a ReadOnlySpan(char)
              and a ReadContext, or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Parser.Else(Cesil.Parser)">
            <summary>
            Create a new parser that will try this parser, but if it returns false
              it will then try the given fallback Parser.
            </summary>
        </member>
        <member name="M:Cesil.Parser.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a Parser from the given method.
            
            The method must:
             - be static
             - return a bool
             - have 3 parameters
                * ReadOnlySpan(char)
                * in ReadContext, 
                * out assignable to outputType
            </summary>
        </member>
        <member name="M:Cesil.Parser.ForConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Create a Parser from the given constructor.
            
            The method must:
             - take either a ReadOnlySpan(char)
            or
             - take parameters
                * ReadOnlySpan(char)
                * in ReadContext
            </summary>
        </member>
        <member name="M:Cesil.Parser.ForDelegate``1(Cesil.ParserDelegate{``0})">
            <summary>
            Create a Parser from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Parser.GetDefault(System.Reflection.TypeInfo)">
            <summary>
            Returns the default parser for the given type, if any exists.
            </summary>
        </member>
        <member name="M:Cesil.Parser.ToString">
            <summary>
            Describes this Parser.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.Parser.Equals(Cesil.Parser)">
            <summary>
            Returns true if the given Parser is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.Parser.Equals(System.Object)">
            <summary>
            Returns true if the given object is equivalent to this one
            </summary>
        </member>
        <member name="M:Cesil.Parser.GetHashCode">
            <summary>
            Returns a stable hash for this Parser.
            </summary>
        </member>
        <member name="M:Cesil.Parser.op_Equality(Cesil.Parser,Cesil.Parser)">
            <summary>
            Compare two Parsers for equality
            </summary>
        </member>
        <member name="M:Cesil.Parser.op_Inequality(Cesil.Parser,Cesil.Parser)">
            <summary>
            Compare two Parsers for inequality
            </summary>
        </member>
        <member name="M:Cesil.Parser.op_Explicit(System.Reflection.MethodInfo)~Cesil.Parser">
            <summary>
            Convenience operator, equivalent to calling Parser.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.Parser.op_Explicit(System.Reflection.ConstructorInfo)~Cesil.Parser">
            <summary>
            Convenience operator, equivalent to calling Parser.ForConstructor if non-null.
            
            Returns null if cons is null.
            </summary>
        </member>
        <member name="M:Cesil.Parser.op_Explicit(System.Delegate)~Cesil.Parser">
            <summary>
            Convenience operator, equivalent to calling Parser.ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="T:Cesil.StaticResetDelegate">
            <summary>
            Delegate type for resets that don't take an instance of the row.
            </summary>
        </member>
        <member name="T:Cesil.ResetDelegate`1">
            <summary>
            Delegate type for resets.
            </summary>
        </member>
        <member name="T:Cesil.Reset">
            <summary>
            Represents code called before a setter is called or a field
              is set.
            
            Wraps a static method, an instance method, or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Reset.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a reset from a method.
            
            If method is an instance, it can take:
             - zero parameters or 
             - a single `in ReadContext` parameter.
            
            If a method is static, it can take:
             - zero parameters or
             - a single parameter of the row type or
             - a single parameter of `in ReadContext` or
             - two parameters, the first of the row type and the second of `in ReadContext`
            
            If the reset is instance or takes a of the row type parameter, the instance or parameter
              type must be assignable from the type being deserialized.
            </summary>
        </member>
        <member name="M:Cesil.Reset.ForDelegate``1(Cesil.ResetDelegate{``0})">
            <summary>
            Create a reset from a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Reset.ForDelegate(Cesil.StaticResetDelegate)">
            <summary>
            Create a reset from a delegate.
            </summary>
        </member>
        <member name="M:Cesil.Reset.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given Reset.
            </summary>
        </member>
        <member name="M:Cesil.Reset.Equals(Cesil.Reset)">
            <summary>
            Returns true if this object equals the given Reset.
            </summary>
        </member>
        <member name="M:Cesil.Reset.GetHashCode">
            <summary>
            Returns a stable hash for this Reset.
            </summary>
        </member>
        <member name="M:Cesil.Reset.ToString">
            <summary>
            Describes this Reset.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.Reset.op_Explicit(System.Reflection.MethodInfo)~Cesil.Reset">
            <summary>
            Convenience operator, equivalent to calling Reset.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.Reset.op_Explicit(System.Delegate)~Cesil.Reset">
            <summary>
            Convenience operator, equivalent to calling Reset.ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="M:Cesil.Reset.op_Equality(Cesil.Reset,Cesil.Reset)">
            <summary>
            Compare two Resets for equality
            </summary>
        </member>
        <member name="M:Cesil.Reset.op_Inequality(Cesil.Reset,Cesil.Reset)">
            <summary>
            Compare two Resets for inequality
            </summary>
        </member>
        <member name="T:Cesil.StaticSetterDelegate`1">
            <summary>
            Delegate type for setters that don't take an instance.
            </summary>
        </member>
        <member name="T:Cesil.SetterDelegate`2">
            <summary>
            Delegate type for setters.
            </summary>
        </member>
        <member name="T:Cesil.SetterByRefDelegate`2">
            <summary>
            Delegate type for setters, where instance is passed by ref.
            </summary>
        </member>
        <member name="T:Cesil.Setter">
            <summary>
            Represents code used to set parsed values onto types.
            
            Wraps a static method, an instance method, a delegate, a field, or a constructor
              parameter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Create a setter from a PropertyInfo.
            
            Throws if the property does not have a setter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a setter from a method.
            
            The method must return void.
            
            If the method is a static method it may:
             - take 1 parameter (the result of the parser) or
             - take 2 parameters, the result of the parser and an `in ReadContext` or
             - take 2 parameters, the row type (which may be passed by ref), and the result of the parser or
             - take 3 parameters, the row type (which may be passed by ref), the result of the parser, and `in ReadContext`
            
            If the method is an instance method:
             - it must be on the row type, and take 1 parameter (the result of the parser) or
             - it must be on the row type, and take 2 parameters, the result of the parser and an `in ReadContext`
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForField(System.Reflection.FieldInfo)">
            <summary>
            Creates setter from a field.
            
            Field can be either an instance field or static field.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForDelegate``1(Cesil.StaticSetterDelegate{``0})">
            <summary>
            Create a Setter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForDelegate``2(Cesil.SetterDelegate{``0,``1})">
            <summary>
            Create a Setter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForDelegate``2(Cesil.SetterByRefDelegate{``0,``1})">
            <summary>
            Create a Setter from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ForConstructorParameter(System.Reflection.ParameterInfo)">
            <summary>
            Create a Setter from the given constructor parameter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given Setter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.Equals(Cesil.Setter)">
            <summary>
            Returns true if this object equals the given Setter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.GetHashCode">
            <summary>
            Returns a stable hash for this Setter.
            </summary>
        </member>
        <member name="M:Cesil.Setter.ToString">
            <summary>
            Describes this Setter.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Explicit(System.Reflection.MethodInfo)~Cesil.Setter">
            <summary>
            Convenience operator, equivalent to calling Setter.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Explicit(System.Reflection.FieldInfo)~Cesil.Setter">
            <summary>
            Convenience operator, equivalent to calling Setter.ForField if non-null.
            
            Returns null if field is null.
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Explicit(System.Reflection.ParameterInfo)~Cesil.Setter">
            <summary>
            Convenience operator, equivalent to calling Setter.ForConstructorParameter if non-null.
            
            Returns null if parameter is null.
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Explicit(System.Delegate)~Cesil.Setter">
            <summary>
            Convenience operator, equivalent to calling Setter.ForDelegate if non-null.
            
            Returns null if field is null.
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Equality(Cesil.Setter,Cesil.Setter)">
            <summary>
            Compare two Setters for equality
            </summary>
        </member>
        <member name="M:Cesil.Setter.op_Inequality(Cesil.Setter,Cesil.Setter)">
            <summary>
            Compare two Setters for inequality
            </summary>
        </member>
        <member name="T:Cesil.StaticShouldSerializeDelegate">
            <summary>
            Delegate type for 'should serialize' that don't take a row.
            </summary>
        </member>
        <member name="T:Cesil.ShouldSerializeDelegate`1">
            <summary>
            Delegate type for 'should serialize'.
            </summary>
        </member>
        <member name="T:Cesil.ShouldSerialize">
            <summary>
            Represents code used to determine whether or not to write a value.
            
            Wraps a static method, an instance method, or a delegate.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.ForMethod(System.Reflection.MethodInfo)">
            <summary>
            Create a ShouldSerialize from a method.
            
            Method must return bool.
            
            If method is an instance method it must:
              - take zero parameters or
              - take one parameter, of type `in WriteContext`
            
            If method is a static method, it must:
              - take zero parameters or 
              - take one parameter of the type being serialized or
              - take two parameters, the first being the type being serialized and the second being `in WriteContext`
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.ForDelegate``1(Cesil.ShouldSerializeDelegate{``0})">
            <summary>
            Create a ShouldSerialize from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.ForDelegate(Cesil.StaticShouldSerializeDelegate)">
            <summary>
            Create a ShouldSerialize from the given delegate.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.Equals(System.Object)">
            <summary>
            Returns true if this object equals the given ShouldSerialize.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.Equals(Cesil.ShouldSerialize)">
            <summary>
            Returns true if this object equals the given ShouldSerialize.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.GetHashCode">
            <summary>
            Returns a stable hash for this ShouldSerialize.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.ToString">
            <summary>
            Describes this ShouldSerialize.
            
            This is provided for debugging purposes, and the format is not guaranteed to be stable between releases.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.op_Explicit(System.Reflection.MethodInfo)~Cesil.ShouldSerialize">
            <summary>
            Convenience operator, equivalent to calling ShouldSerialize.ForMethod if non-null.
            
            Returns null if method is null.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.op_Explicit(System.Delegate)~Cesil.ShouldSerialize">
            <summary>
            Convenience operator, equivalent to calling ShouldSerialize.ForDelegate if non-null.
            
            Returns null if del is null.
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.op_Equality(Cesil.ShouldSerialize,Cesil.ShouldSerialize)">
            <summary>
            Compare two ShouldSerializes for equality
            </summary>
        </member>
        <member name="M:Cesil.ShouldSerialize.op_Inequality(Cesil.ShouldSerialize,Cesil.ShouldSerialize)">
            <summary>
            Compare two ShouldSerializes for inequality
            </summary>
        </member>
    </members>
</doc>
